{
    "version": "https://jsonfeed.org/version/1",
    "title": "ZoyagErの博客",
    "description": "",
    "home_page_url": "http://github.com/zoyager",
    "items": [
        {
            "id": "http://github.com/zoyager/2024/05/03/python%E8%AE%B0%E5%BD%95/",
            "url": "http://github.com/zoyager/2024/05/03/python%E8%AE%B0%E5%BD%95/",
            "title": "'python记录'",
            "date_published": "2024-05-03T00:54:49.000Z",
            "content_html": "<p>这是一篇 python 学习过程中的练习的习题～</p>\n<p>其中含有代码和相关内容的补充～</p>\n<h2 id=\"数据传输到文件\"><a class=\"anchor\" href=\"#数据传输到文件\">#</a> 数据传输到文件</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"built_in\">open</span>(file,mode=<span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># r 读取</span></span><br><span class=\"line\"><span class=\"comment\"># w 打开文件写入，覆盖原内容</span></span><br><span class=\"line\"><span class=\"comment\"># a 打开文件写入，新内容到后面</span></span><br><span class=\"line\"><span class=\"comment\"># x 打开新文件供写入</span></span><br><span class=\"line\"><span class=\"comment\"># b 二进制文件模式</span></span><br><span class=\"line\"><span class=\"comment\"># t 默认</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"找数字\"><a class=\"anchor\" href=\"#找数字\">#</a> 找数字</h2>\n<p>编写一个程序，查找所有此类数字，它们可以被 7 整除，但不能是 5 的倍数（在 2000 和 3200 之间（均包括在内））。获得的数字应以逗号分隔的顺序打印在一行上。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2000</span>, <span class=\"number\">3201</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i%<span class=\"number\">7</span>==<span class=\"number\">0</span>) <span class=\"keyword\">and</span> (i%<span class=\"number\">5</span>!=<span class=\"number\">0</span>):</span><br><span class=\"line\">        arr.append(<span class=\"built_in\">str</span>(i))<span class=\"comment\">#join函数连接字符串数组</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&#x27;,&#x27;</span>.join(arr)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"join函数\"><a class=\"anchor\" href=\"#join函数\">#</a> join () 函数</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python中有join()和os.path.join()两个函数，具体作用如下：</span><br><span class=\"line\"></span><br><span class=\"line\">     join()：连接字符串数组。将字符串、元组、列表中的元素以指定的字符(分隔符)连接生成一个新的字符串</span><br><span class=\"line\">     os.path.join()：将多个路径组合后返回</span><br><span class=\"line\"></span><br><span class=\"line\">函数说明</span><br><span class=\"line\"></span><br><span class=\"line\">1、join()函数</span><br><span class=\"line\"></span><br><span class=\"line\">语法：  &#x27;sep&#x27;.join(seq)</span><br><span class=\"line\"></span><br><span class=\"line\">参数说明</span><br><span class=\"line\"></span><br><span class=\"line\">    sep：分隔符。可以为空</span><br><span class=\"line\">    seq：要连接的元素序列、字符串、元组、字典</span><br><span class=\"line\"></span><br><span class=\"line\">上面的语法即：以sep作为分隔符，将seq所有的元素合并成一个新的字符串</span><br><span class=\"line\"></span><br><span class=\"line\">返回值：返回一个以分隔符sep连接各个元素后生成的字符串</span><br><span class=\"line\"></span><br><span class=\"line\">2、os.path.join()函数</span><br><span class=\"line\"></span><br><span class=\"line\">语法：  os.path.join(path1[,path2[,......]])</span><br><span class=\"line\"></span><br><span class=\"line\">返回值：将多个路径组合后返回</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"阶乘\"><a class=\"anchor\" href=\"#阶乘\">#</a> 阶乘</h2>\n<p>编写一个程序，可以计算给定数字的阶乘，结果应以逗号分隔的顺序打印在一行上，假设向程序提供了以下输入：8 然后，输出应为：40320</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = []</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">factorial</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">or</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>)</span><br><span class=\"line\">num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">    arr.append(factorial(i))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">str</span>(arr)))</span><br></pre></td></tr></table></figure></p>\n<p>程序内置函数 factorial () 计算阶乘</p>\n<h2 id=\"无重复数字\"><a class=\"anchor\" href=\"#无重复数字\">#</a> 无重复数字</h2>\n<p>有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#不重复数字</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">serect</span>(<span class=\"params\">a,b,c</span>) :</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a!=b <span class=\"keyword\">and</span> b!=c <span class=\"keyword\">and</span> a!=c:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">arr2 = []</span><br><span class=\"line\">total =<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> arr1:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> arr1:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> arr1:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> serect(i,j,k):</span><br><span class=\"line\">                number = i*<span class=\"number\">100</span>+j*<span class=\"number\">10</span>+k</span><br><span class=\"line\">                total += <span class=\"number\">1</span></span><br><span class=\"line\">                arr2.append(number)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;total = %d&quot;</span>%total)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">str</span>(arr2)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"平方数\"><a class=\"anchor\" href=\"#平方数\">#</a> 平方数</h2>\n<p>一个整数，它加上 100 后是一个完全平方数，再加上 168 又是一个完全平方数，请问该数是多少？</p>\n<p>思路：</p>\n<p>最坏的结果是 n 的平方与 (n+1) 的平方刚好差 168，由于是平方的关系，不可能存在比这更大的间隙。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\">n = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">pow</span>(n+<span class=\"number\">1</span>,<span class=\"number\">2</span>)-<span class=\"built_in\">pow</span>(n,<span class=\"number\">2</span>) &lt;= <span class=\"number\">168</span>:</span><br><span class=\"line\">    n += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>((n+<span class=\"number\">1</span>)**<span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> math.sqrt(i+<span class=\"number\">100</span>) == <span class=\"built_in\">int</span>(math.sqrt(i+<span class=\"number\">100</span>)) <span class=\"keyword\">and</span> math.sqrt(i+<span class=\"number\">168</span>) == <span class=\"built_in\">int</span>(math.sqrt(i+<span class=\"number\">168</span>)) :</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"哪一天\"><a class=\"anchor\" href=\"#哪一天\">#</a> 哪一天</h2>\n<p>输入某年某月某日，判断这一天是这一年的第几天？</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">happyyear</span>(<span class=\"params\">year</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(year%<span class=\"number\">400</span>==<span class=\"number\">0</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> year%<span class=\"number\">100</span> != <span class=\"number\">0</span> <span class=\"keyword\">and</span> year % <span class=\"number\">4</span> == <span class=\"number\">0</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">yeardays = [<span class=\"number\">31</span>,<span class=\"number\">28</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>]</span><br><span class=\"line\">days =<span class=\"number\">0</span></span><br><span class=\"line\">year = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入年份：&quot;</span>))</span><br><span class=\"line\">month = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入月份：&quot;</span>))</span><br><span class=\"line\">day = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入日期：&quot;</span>))</span><br><span class=\"line\"><span class=\"keyword\">if</span> happyyear(year) :</span><br><span class=\"line\">    yeardays[<span class=\"number\">1</span>] += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(month-<span class=\"number\">1</span>):</span><br><span class=\"line\">    days += yeardays[i]</span><br><span class=\"line\">days += day</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;今天是今年的第%d天&quot;</span>%days)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"斐波那契数列i\"><a class=\"anchor\" href=\"#斐波那契数列i\">#</a> 斐波那契数列 I</h2>\n<p>斐波那契数列</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Fib</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Fib(n-<span class=\"number\">1</span>)+Fib(n-<span class=\"number\">2</span>)</span><br><span class=\"line\">arr = []</span><br><span class=\"line\">num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,num):</span><br><span class=\"line\">    arr.append(Fib(i))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"九九乘法表\"><a class=\"anchor\" href=\"#九九乘法表\">#</a> 九九乘法表</h2>\n<p>九九乘法表</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,i+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%d*%d=%d\\t&quot;</span>%(j,i,i*j),end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"暂停一秒输出\"><a class=\"anchor\" href=\"#暂停一秒输出\">#</a> 暂停一秒输出</h2>\n<p>暂停一秒输出</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#程序分析 使用 time 模块的 sleep() 函数。</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(<span class=\"built_in\">int</span>(time.time())))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"time模块\"><a class=\"anchor\" href=\"#time模块\">#</a> time 模块</h3>\n<p><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>获取时间戳</span><br><span class=\"line\">python时间戳取整为<span class=\"number\">10</span>位，单位为s</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"built_in\">print</span>(time.time())  <span class=\"comment\"># 1621235477.11</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(time.time()))  <span class=\"comment\"># 1621235477</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2.</span>休眠</span><br><span class=\"line\">程序停止运行<span class=\"number\">3</span>秒</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.</span>获取时间元组</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#显示当前时间的时间元组</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(time.localtime())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(time.localtime(time.time())) <span class=\"comment\"># 同time.localtime()</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#显示一个小时前的时间元组</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(time.localtime(time.time()-<span class=\"number\">3600</span>))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"格式化时间\"><a class=\"anchor\" href=\"#格式化时间\">#</a> 格式化时间</h2>\n<p>暂停一秒输出，并格式化当前时间。</p>\n<p><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(time.strftime(<span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time())))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"生兔子\"><a class=\"anchor\" href=\"#生兔子\">#</a> 生兔子</h2>\n<p>有一对兔子，从出生后第 3 个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">month=<span class=\"number\">12</span></span><br><span class=\"line\">month_1=<span class=\"number\">1</span></span><br><span class=\"line\">month_2=<span class=\"number\">0</span></span><br><span class=\"line\">month_3=<span class=\"number\">0</span></span><br><span class=\"line\">month_elder=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(month):</span><br><span class=\"line\">    month_1,month_2,month_3,month_elder=month_elder+month_3,month_1,month_2,month_elder+month_3</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;第%d个月共&#x27;</span>%(i+<span class=\"number\">1</span>),month_1+month_2+month_3+month_elder,<span class=\"string\">&#x27;对兔子&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;其中1月兔：&#x27;</span>,month_1)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;其中2月兔：&#x27;</span>,month_2)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;其中3月兔：&#x27;</span>,month_3)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;其中成年兔：&#x27;</span>,month_elder)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"统计字符\"><a class=\"anchor\" href=\"#统计字符\">#</a> 统计字符</h2>\n<p>输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#程序分析 利用 while 或 for 语句,条件为输入的字符不为 ‘\\n’。</span></span><br><span class=\"line\">string=<span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入字符串：&quot;</span>)</span><br><span class=\"line\">alp=<span class=\"number\">0</span></span><br><span class=\"line\">num=<span class=\"number\">0</span></span><br><span class=\"line\">spa=<span class=\"number\">0</span></span><br><span class=\"line\">oth=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(string)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> string[i].isspace():</span><br><span class=\"line\">        spa+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> string[i].isdigit():</span><br><span class=\"line\">        num+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> string[i].isalpha():</span><br><span class=\"line\">        alp+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        oth+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;space: &#x27;</span>,spa)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;digit: &#x27;</span>,num)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;alpha: &#x27;</span>,alp)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;other: &#x27;</span>,oth)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"字符串处理函数\"><a class=\"anchor\" href=\"#字符串处理函数\">#</a> 字符串处理函数</h3>\n<h4 id=\"字符串查找\"><a class=\"anchor\" href=\"#字符串查找\">#</a> 字符串查找</h4>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&quot;my name is qlee，what your name?&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;name&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.find(str2))<span class=\"comment\">#全部查找</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.find(str2,<span class=\"number\">5</span>))<span class=\"comment\">#从第5个元素开始查找</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.find(str2,<span class=\"number\">35</span>))<span class=\"comment\"># 从第35个元素开始查找，超过元素索引或者没找到，不会报错</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"字符串大小转换\"><a class=\"anchor\" href=\"#字符串大小转换\">#</a> 字符串大小转换</h4>\n<table>\n<thead>\n<tr>\n<th>upper</th>\n<th>将字符串中所有元素都转为大写</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lower</td>\n<td>将字符串中所有元素都转为小写</td>\n</tr>\n<tr>\n<td>swapcase</td>\n<td>交换大小写。大写转为小写，小写转为大写</td>\n</tr>\n<tr>\n<td>capitalize</td>\n<td>第一个大写，其余小写</td>\n</tr>\n<tr>\n<td>title</td>\n<td>每个单词的第一次字符大写，其余均为小写</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"字符串对齐\"><a class=\"anchor\" href=\"#字符串对齐\">#</a> 字符串对齐</h4>\n<p>center (width, fillchar)：返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</p>\n<p>ljust (width [, fillchar])：返回一个原字符串左对齐，并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。</p>\n<p>rjust (width,[, fillchar])：返回一个原字符串右对齐，并使用 fillchar (默认空格）填充至长度 width 的新字符串</p>\n<p>zfill (width)：返回长度为 width 的字符串，原字符串右对齐，前面填充 0</p>\n<h4 id=\"合并同join函数\"><a class=\"anchor\" href=\"#合并同join函数\">#</a> 合并同 join 函数</h4>\n<h4 id=\"判断\"><a class=\"anchor\" href=\"#判断\">#</a> 判断</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isidentifier\t判断字符串是不是合法标识符(字符、数字、下划线)</span><br><span class=\"line\">isspace\t判断字符是否只有空白字符(回车、换行和水平制表符)</span><br><span class=\"line\">isalpha\t判断字符串是否全部由字母组成</span><br><span class=\"line\">isdecimal\t判断字符是否全部由十进制的数字组成，不包括中文、罗马字符</span><br><span class=\"line\">isdigit\t判断字符串只包含数字，不包括中文数字</span><br><span class=\"line\">isnumeric\t判断字符串是否全部由数字组成，中文数字也算</span><br><span class=\"line\">isalnum\t判断字符串是否由字母和数字组成</span><br><span class=\"line\">islower\t判断字符串中的字符是否全部为小写，字符串至少有一个字符</span><br><span class=\"line\">isupper\t判断字符串中的字符是否全部为大写，字符串至少有一个字符</span><br><span class=\"line\">istitle\t判断字符串是否标题话，见titile</span><br><span class=\"line\">isascii\t如果字符串为空或字符串中的所有字符都是 ASCII，则返回 True，否则返回 False。</span><br><span class=\"line\">isprintable\t如果所有字符都是可打印的，则 isprintable() 方法返回 True，否则返回 False。</span><br><span class=\"line\"></span><br><span class=\"line\">startswith()   #判断字符串是否以指定字符开始</span><br><span class=\"line\">endswith()      #判断字符串是否以指定字符结束</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"aaaa数字\"><a class=\"anchor\" href=\"#aaaa数字\">#</a> aaaa 数字</h2>\n<p>求 s=a+aa+aaa+aaaa+aa…a 的值，其中 a 是一个数字。例如 2+22+222+2222+22222 (此时共有 5 个数相加)，几个数相加由键盘控制。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;被加数字：&#x27;</span>)</span><br><span class=\"line\">n=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;加几次？：&#x27;</span>))</span><br><span class=\"line\">res=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">    res+=<span class=\"built_in\">int</span>(a)</span><br><span class=\"line\">    a+=a[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;结果是：&#x27;</span>,res)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"完数\"><a class=\"anchor\" href=\"#完数\">#</a> 完数</h2>\n<p>一个数如果恰好等于它的因子之和，这个数就称为 &quot;完数&quot;。例如 6=1＋2＋3. 编程找出 1000 以内的所有完数。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">factor</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    arr = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> m % i == <span class=\"number\">0</span>:</span><br><span class=\"line\">            arr.add(i)</span><br><span class=\"line\">            arr.add(m/i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,<span class=\"number\">1001</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"built_in\">sum</span>(factor(i)) - i:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"打印所有小于n的斐波那契数\"><a class=\"anchor\" href=\"#打印所有小于n的斐波那契数\">#</a> 打印所有小于<strong> n</strong> 的斐波那契数</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">t1 = <span class=\"number\">1</span></span><br><span class=\"line\">t2 = <span class=\"number\">1</span></span><br><span class=\"line\">result = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (t1 &lt; n):</span><br><span class=\"line\">    <span class=\"comment\"># 打印t1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(t1)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 定义result 为t1和t2之和</span></span><br><span class=\"line\">    result = t1 + t2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将t2的值分配给t1</span></span><br><span class=\"line\">    t1 = t2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将result的值分配给t2</span></span><br><span class=\"line\">    t2 = result</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"判断质数\"><a class=\"anchor\" href=\"#判断质数\">#</a> 判断质数</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    flag = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 循环</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">2</span>,n):</span><br><span class=\"line\">        <span class=\"comment\"># 判断 i是否能整除 number</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果能整除，将flag设置为1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n % i == <span class=\"number\">0</span>:</span><br><span class=\"line\">            flag =<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 根据flag的值，判断是否是质数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> flag == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;非质数&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> :</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;质数&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">number = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\">check(number)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"列表处理类\"><a class=\"anchor\" href=\"#列表处理类\">#</a> 列表处理类</h2>\n<h3 id=\"列表末尾添加元素\"><a class=\"anchor\" href=\"#列表末尾添加元素\">#</a> 列表末尾添加元素</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">odd_numbers = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取一个整数作为输入并将其分配给number变量。</span></span><br><span class=\"line\">number = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用append()函数将用户输入的项目添加到列表的最后。</span></span><br><span class=\"line\">odd_numbers.append(number)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印更新后的列表。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(odd_numbers)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"列表元素的积\"><a class=\"anchor\" href=\"#列表元素的积\">#</a> 列表元素的积</h3>\n<p>要求：</p>\n<p>编写一个程序：计算列表元素的乘积。</p>\n<ul>\n<li>\n<p>创建列表 <code>my_list</code>  并将 <code>[2, 5, 3, 4, 1]</code>  分配给它。</p>\n</li>\n<li>\n<p>声明一个变量 <code>product</code> ，其值为<strong> 1</strong>。</p>\n</li>\n<li>\n<p>循环  <code>my_list</code> ，并将每个元素乘以 <code>product</code> ，然后将结果赋值给 <code>product</code> 。</p>\n</li>\n<li>\n<p>打印 <code>product</code> 。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个列表my_list并将[2, 5, 3, 4, 1]分配给它。</span></span><br><span class=\"line\">my_list = [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个变量product，其值为1。</span></span><br><span class=\"line\">product = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 循环 my_list，并将每个元素乘以product，然后将结果赋值给product</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> my_list:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 运算</span></span><br><span class=\"line\">    product = product * i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印product。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(product)</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"判断字符串首尾字符是否相等\"><a class=\"anchor\" href=\"#判断字符串首尾字符是否相等\">#</a> 判断字符串首尾字符是否相等</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用户输入</span></span><br><span class=\"line\">check = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用索引取得字符串的第一个和最后一个字符，并判断是否相等</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> check[<span class=\"number\">0</span>] == check[-<span class=\"number\">1</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;相等&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;不相等&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"依次打印列表元素\"><a class=\"anchor\" href=\"#依次打印列表元素\">#</a> 依次打印列表元素</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建fruit列表，其中有 &quot;苹果&quot;, &quot;猕猴桃&quot;, &quot;葡萄&quot;, &quot;芒果&quot; 等元素。</span></span><br><span class=\"line\">fruit = [<span class=\"string\">&#x27;苹果&#x27;</span>,<span class=\"string\">&#x27;猕猴桃&#x27;</span>,<span class=\"string\">&#x27;葡萄&#x27;</span>,<span class=\"string\">&#x27;芒果&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印列表中的元素，使用for循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> fruit:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"反转列表\"><a class=\"anchor\" href=\"#反转列表\">#</a> 反转列表</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建列表</span></span><br><span class=\"line\">my_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 反转列表 并打印新列表</span></span><br><span class=\"line\">my_list.reverse()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_list)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"列表切片\"><a class=\"anchor\" href=\"#列表切片\">#</a> 列表切片</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建列表</span></span><br><span class=\"line\">arr = [<span class=\"string\">&quot;p&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"string\">&quot;o&quot;</span>,<span class=\"string\">&quot;g&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;m&quot;</span>,<span class=\"string\">&quot;i&quot;</span>,<span class=\"string\">&quot;z&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取列表第二项到倒数第二项的元素赋值给新列表</span></span><br><span class=\"line\">app = arr[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\"># 打印新的列表</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(app)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"统计字符出现次数\"><a class=\"anchor\" href=\"#统计字符出现次数\">#</a> 统计字符出现次数</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输入字符串，总字符串</span></span><br><span class=\"line\">s = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入字符，需要查找的</span></span><br><span class=\"line\">p = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 循环字符串</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">    <span class=\"comment\"># 判断并计数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == p:</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印count</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(count)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"字符串是否相同忽略大小写\"><a class=\"anchor\" href=\"#字符串是否相同忽略大小写\">#</a> 字符串是否相同 (忽略大小写)</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用户输入</span></span><br><span class=\"line\">s1 = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">s2 = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换为小写字母，并使用&quot;==&quot;检查它们是否相等</span></span><br><span class=\"line\">s1 = s1.lower()</span><br><span class=\"line\">s2 = s2.lower()</span><br><span class=\"line\"><span class=\"keyword\">if</span> s1 == s2:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;相等&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;不相等&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"合并两个字典\"><a class=\"anchor\" href=\"#合并两个字典\">#</a> 合并两个字典</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = &#123;<span class=\"number\">12</span>: <span class=\"string\">&#x27;Kathmandu&#x27;</span>, <span class=\"number\">11</span>: <span class=\"string\">&#x27;London&#x27;</span>, <span class=\"number\">3</span>: <span class=\"string\">&#x27;Sydney&#x27;</span>&#125;</span><br><span class=\"line\">B = &#123;<span class=\"number\">10</span>: <span class=\"string\">&#x27;New York&#x27;</span>, <span class=\"number\">2</span>: <span class=\"string\">&#x27;Delhi&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并字典</span></span><br><span class=\"line\">A.update(B)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"打印字典的值\"><a class=\"anchor\" href=\"#打印字典的值\">#</a> 打印字典的值</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_dict = &#123;<span class=\"string\">&quot;Elvis&quot;</span>: <span class=\"number\">84</span>, <span class=\"string\">&quot;Nelson&quot;</span>: <span class=\"number\">74</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 循环字典</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> my_dict.keys():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(my_dict[i])</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"列表推导过滤偶数\"><a class=\"anchor\" href=\"#列表推导过滤偶数\">#</a> 列表推导过滤偶数</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [<span class=\"number\">12</span>, <span class=\"number\">17</span>, <span class=\"number\">28</span>, <span class=\"number\">19</span>, <span class=\"number\">11</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用列表推导创建一个新的列表只包含奇数，即17, 19, 11</span></span><br><span class=\"line\">app =[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        app.append(i)</span><br><span class=\"line\"><span class=\"comment\"># 打印新列表 </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(app)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"前n个自然数列表\"><a class=\"anchor\" href=\"#前n个自然数列表\">#</a> 前 n 个自然数列表</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输入整数存储在变量n中 </span></span><br><span class=\"line\">n = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表推导创建包含1到n的自然数 </span></span><br><span class=\"line\">numbers = [item <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印列表</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(numbers)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"字典推导创建字典\"><a class=\"anchor\" href=\"#字典推导创建字典\">#</a> 字典推导创建字典</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典推导创建新字典 </span></span><br><span class=\"line\">app =&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">    app[i] = i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印字典 </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(app)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"lambda函数求数字立方\"><a class=\"anchor\" href=\"#lambda函数求数字立方\">#</a> lambda 函数求数字立方</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建lambda函数，返回参数的立方 </span></span><br><span class=\"line\">gcc =  <span class=\"keyword\">lambda</span> x : x**<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入一个整数 </span></span><br><span class=\"line\">number = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数并打印结果 </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(gcc(number))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"lambda函数相关\"><a class=\"anchor\" href=\"#lambda函数相关\">#</a> lambda 函数相关</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lambda</span> argument_list:expersion</span><br><span class=\"line\">argument_list：参数名</span><br><span class=\"line\">expersion：关系式</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">匿名函数使用注意点：</span><br><span class=\"line\"><span class=\"number\">1.</span>不要返回任何值</span><br><span class=\"line\"><span class=\"number\">2.</span>不要忘记更好的选择</span><br><span class=\"line\"><span class=\"number\">3.</span>不要将它赋值给变量</span><br><span class=\"line\"><span class=\"number\">4.</span>不要忘记列表推导式</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"lambda算术运算\"><a class=\"anchor\" href=\"#lambda算术运算\">#</a> Lambda 算术运算</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建lambda函数，计算两个数字的平方根之和</span></span><br><span class=\"line\">compute = <span class=\"keyword\">lambda</span> x,y: x**<span class=\"number\">0.5</span>+y**<span class=\"number\">0.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入两个整数</span></span><br><span class=\"line\">n1 = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">n2 = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数并打印结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(compute(n1,n2))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"函数可变参数\"><a class=\"anchor\" href=\"#函数可变参数\">#</a> 函数可变参数</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建函数，参数为可变数量的参数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">multiply_numbers</span>(<span class=\"params\">*s</span>):</span><br><span class=\"line\">    result = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">        result *= i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入三个整数 </span></span><br><span class=\"line\">n1 = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">n2 = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">n3 = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数 </span></span><br><span class=\"line\">result = multiply_numbers(n1,n2,n3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印结果 </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"函数可变关键字参数\"><a class=\"anchor\" href=\"#函数可变关键字参数\">#</a> 函数可变关键字参数</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建函数，参数为可变数量的关键字参数 </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">full_name</span>(<span class=\"params\">**s</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 打印参数</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\">first = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">last = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">full_name(first = first,last = last)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"类对象属性\"><a class=\"anchor\" href=\"#类对象属性\">#</a> 类对象属性</h2>\n<p>要求：</p>\n<p>编写一个程序来创建一个类并使用该类的方法来打印属性。</p>\n<p><strong>创建一个类</strong>:</p>\n<ul>\n<li>创建自行车 <code>Bicycle</code>  类。</li>\n<li>在类中，创建两个方法： <code>__init__()</code>  和 <code>print_attributes()</code> 。</li>\n<li>类有两个属性: <code>gear'和</code>  speed <code>，它们应该在</code> <strong> init</strong> ()` 中初始化。</li>\n<li>在 <code>print_attributes()</code>  方法中，将 <code>gear</code>  属性和 <code>speed</code>  属性分别打印在两行。</li>\n</ul>\n<p><strong>在类外</strong>:</p>\n<ul>\n<li>创建 <code>Bicycle</code>  类对象 <code>bicycle1</code> 。对象的 <code>gear</code>  和 <code>speed</code>  属性分别是<strong> 4</strong> 和<strong> 80</strong>。</li>\n<li>使用 <code>bicycle1</code>  对象调用 <code>print_attributes()</code>  方法。</li>\n</ul>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Bicycle类 </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">bicycle1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, gear, speed</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 初始化属性 </span></span><br><span class=\"line\">        self.gear = gear</span><br><span class=\"line\">        self.speed = speed</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 创建print_atributes() 方法 </span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">print_atributes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self.gear)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self.speed)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建对象， 4 和 80 作为初始化参数 </span></span><br><span class=\"line\">bicycle1 = bicycle1(<span class=\"number\">4</span>,<span class=\"number\">80</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用 print_atributes() 方法 </span></span><br><span class=\"line\">bicycle1.print_atributes()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"python-类相关\"><a class=\"anchor\" href=\"#python-类相关\">#</a> python 类相关</h3>\n<h4 id=\"类的创建和类的实例\"><a class=\"anchor\" href=\"#类的创建和类的实例\">#</a> 类的创建和类的实例</h4>\n<p>类是一种用户定义的数据类型，它代表着一类具有相同属性和方法的对象的集合。</p>\n<p>实例则是类的具体实现，是类的一个个体，可以使用类定义的属性和方法。</p>\n<pre><code>定义类：使用关键字 class\n创建一个类的对象：可以通过类名后面加括号来创建一个实例\n\n__init__() 作为类的构造方法，用来初始化类的实例，\nself 表示类的实例本身。\n    self 的名字并不是规定死的，也可以使用 this，但是最好还是按照约定使用 self。\n其他方法则按照正常函数的形式定义。\n类可以定义属性和方法，属性是类的数据成员，方法是类的函数成员。\n类的方法与普通的函数只有一个特别的区别：它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。\n\nclass Dog:\n    def __init__(self, name, breed, age):\n        self.name = name\n        self.breed = breed\n        self.age = age\n\nmy_dog = Dog('Buddy', 'Golden Retriever', 6)\n\n上面的代码中，“Dog”类表示狗类，它包含名字、品种和年龄这三个属性。\n创建了一个 “my_dog” 的实例，该实例有名为 “Buddy” 的名字、品种为 “Golden Retriever”、年龄为 6 岁。\n此时，my_dog 变量就代表了一个狗类的实例，可以通过访问它的属性来获取相应的信息，例如：\n\nprint(my_dog.age)\n\n这将打印出 6。同时，也可以使用对象的方法来修改属性或进行其他操作：\n\nclass Dog:\n    def __init__(self, name, breed, age):\n        self.name = name\n        self.breed = breed\n        self.age = age\n\n    def bark(self):\n        print('Woof woof!')\n\nmy_dog = Dog('Buddy', 'Golden Retriever', 6)\nmy_dog.bark()  # 输出 “Woof woof！”\n</code></pre>\n<h4 id=\"类的属性\"><a class=\"anchor\" href=\"#类的属性\">#</a> 类的属性</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 Python 中，类的属性可以被理解为类的变量。</span><br><span class=\"line\"></span><br><span class=\"line\">Python 的公有属性、私有属性以及实例属性、静态属性之间是存在关联的，具体关系如下：</span><br><span class=\"line\"></span><br><span class=\"line\">    公有属性：指没有加前缀双下划线__的属性，可以在类内外被访问，也可以被继承和重写。</span><br><span class=\"line\"></span><br><span class=\"line\">    私有属性：指加了前缀双下划线__的属性，只能在类内被访问和修改，而在类外部无法访问或修改。</span><br><span class=\"line\"></span><br><span class=\"line\">    实例属性：指定义在 __init__ 方法中，以 self.属性名 的形式定义的属性，每个实例都独立拥有一个自己的实例属性，它们随实例创建和销毁。</span><br><span class=\"line\"></span><br><span class=\"line\">    静态属性：指在类下直接定义的属性，可以使用类名直接访问，它们是类的属性，每个实例都共享一个静态属性。</span><br><span class=\"line\"></span><br><span class=\"line\">公有属性和私有属性是属于对象或类中的实例属性或静态属性的一种访问方式，</span><br><span class=\"line\"></span><br><span class=\"line\">也就是说，公有属性和私有属性可以同时作为实例属性和静态属性存在。</span><br><span class=\"line\"></span><br><span class=\"line\">对于 Python 中的公有属性和实例属性的关系，可以通过实例的 self.属性名 来访问和修改；</span><br><span class=\"line\"></span><br><span class=\"line\">而对于 Python 中的私有属性，则需要在属性名前面加上双下划线&quot;__&quot;，才能被认定为私有属性，无法通过实例调用，只能通过类内部的方法进行访问和修改。对于静态属性，则是直接定义在类下，可以使用类名进行访问和修改。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">公有属性</span><br><span class=\"line\"></span><br><span class=\"line\">公有属性是指可以从类的外部直接访问和修改的属性，一般在类的构造方法中用 self 关键字来定义，例如：</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    def __init__(self, name, age):</span><br><span class=\"line\">        self.name = name  # 公有属性</span><br><span class=\"line\">        self.age = age  # 公有属性</span><br><span class=\"line\"></span><br><span class=\"line\">私有属性是指不能从类的外部直接访问和修改的属性。在 Python 中，可以通过在属性名前面加上双下划线 __ 来定义私有属性，例如：</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    def __init__(self, name, age):</span><br><span class=\"line\">        self.__name = name  # 私有属性</span><br><span class=\"line\">        self.__age = age  # 私有属性</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"面向对象封装案例\"><a class=\"anchor\" href=\"#面向对象封装案例\">#</a> 面向对象封装案例</h4>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Gun</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,model</span>):</span><br><span class=\"line\">        <span class=\"comment\">#定义枪类型</span></span><br><span class=\"line\">        self.model = model</span><br><span class=\"line\">        <span class=\"comment\">#定义子弹</span></span><br><span class=\"line\">        self.bullet_count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_bullet</span>(<span class=\"params\">self,count</span>):</span><br><span class=\"line\">        <span class=\"comment\">#装填子弹</span></span><br><span class=\"line\">        self.bullet_count += count</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">shoot</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.bullet_count &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;[%s]没子弹了&quot;</span>%self.model)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        self.bullet_count -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;[%s].....[%d]&quot;</span>%(self.model,self.bullet_count))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">soldier</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">        <span class=\"comment\">#定义姓名</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        <span class=\"comment\">#定义抢</span></span><br><span class=\"line\">        self.gun = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fire</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.gun == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;[%s]&quot;</span>%self.name)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;[tututu]&quot;</span>)</span><br><span class=\"line\">            self.gun.add_bullet(<span class=\"number\">50</span>)</span><br><span class=\"line\">            self.gun.shoot()</span><br><span class=\"line\">ak = Gun(<span class=\"string\">&quot;ak47&quot;</span>)</span><br><span class=\"line\">xusanduo = soldier(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\">xusanduo.gun = ak</span><br><span class=\"line\">xusanduo.fire()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(xusanduo.gun)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h4>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#单继承，多继承</span></span><br><span class=\"line\"><span class=\"comment\">#子类父类：</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> :</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">eat</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;eat&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">drink</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;drink&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;run&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sleep</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;sleep&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>(<span class=\"title class_ inherited__\">Animal</span>) :</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">bark</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;bark&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#继承的传递性</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XTQ</span>(<span class=\"title class_ inherited__\">Dog</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fly</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fly&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#    def bark(self):#方法的重写（覆盖父类的方法）</span></span><br><span class=\"line\"><span class=\"comment\">#        print(&quot;barkbark&quot;)</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>().bark()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;barkbark&quot;</span>)<span class=\"comment\">#方法的重写（扩展父类的方法）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#多继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">demo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;demo&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>(A,B):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">c = C()</span><br><span class=\"line\">c.test()</span><br><span class=\"line\">c.demo()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h4>\n<p>不同子类对象，调用相同的父类，产生不同的结果。</p>\n<h2 id=\"坐标类对象相加\"><a class=\"anchor\" href=\"#坐标类对象相加\">#</a> 坐标类对象相加</h2>\n<p>要求：</p>\n<p>编写一个程序，计算两个二维坐标类对象相加之和。</p>\n<p><strong>创建类</strong>:</p>\n<ul>\n<li>创建坐标类 <code>Coordinate</code> ，属性为 <code>x</code>  和 <code>y</code> 。</li>\n<li>使用 <code>__init__()</code>  方法来初始化属性。</li>\n<li>该类有 <code>add_coordinates()</code>  方法，参数为 <code>Coordinate</code>  类对象，计算两个对象的 <code>x</code>  和 <code>y</code>  分别相加之和，并作为新的属性返回一个新的 <code>Coordinate</code>  对象。</li>\n</ul>\n<p><strong>在类外</strong>:</p>\n<ul>\n<li>\n<p>创建两个 <code>Coordinate</code>  类对象 <code>c1</code>  和 <code>c2</code> 。</p>\n</li>\n<li>\n<p><code>c1</code>  的 <code>x</code>  和 <code>y</code>  属性分别为<strong> 5</strong> 和<strong> 6</strong>。</p>\n</li>\n<li>\n<p><code>c2</code>  的 <code>x</code>  和 <code>y</code>  属性分别为<strong> 7</strong> 和<strong> 9</strong>。</p>\n</li>\n<li>\n<p>使用 <code>c1</code>  对象调用 <code>add_coordinates()</code> ，以 <code>c2</code>  为参数，并将结果赋值到 <code>c3</code>  变量中。</p>\n</li>\n<li>\n<p>打印 <code>c3</code>  的 <code>x</code>  属性。</p>\n</li>\n<li>\n<p>打印 <code>c3</code>  的 <code>y</code>  属性。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 Coordinate 类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Coordinate</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 初始化属性x 和 y，使用__init__() 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x, y</span>):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 实现 add_coordinates() 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_coordinates</span>(<span class=\"params\">self, other</span>):</span><br><span class=\"line\">        new_x = self.x + other.x</span><br><span class=\"line\">        new_y = self.y +other.y</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Coordinate(new_x,new_y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建对象 c1 和 c2</span></span><br><span class=\"line\">c1 = Coordinate(<span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">c2 = Coordinate(<span class=\"number\">7</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对象c1调用add_coordinates()方法，参数为c2</span></span><br><span class=\"line\">c3 = c1.add_coordinates(c2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出对象c3 的属性</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(c3.x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c3.y)</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h2 id=\"计算周长\"><a class=\"anchor\" href=\"#计算周长\">#</a> 计算周长</h2>\n<p>要求：</p>\n<p>编写一个程序来计算三角形的周长，使用面向对象方式来编程。</p>\n<p><strong>创建类</strong>:</p>\n<ul>\n<li>创建三角形 <code>Triangle</code>  类，有三个属性 <code>x</code> ， <code>y</code> ， <code>z</code> 。</li>\n<li>使用 <code>__init__()</code>  方法来初始化属性。</li>\n<li>创建 <code>get_perimeter()</code>  的方法来计算周长并返回。</li>\n</ul>\n<p><strong>在类外</strong>:</p>\n<ul>\n<li>\n<p>输入三个整数，分别赋值给变量 <code>a</code> 、 <code>b</code>  和 <code>c</code> 。(三角形三边长度)。</p>\n</li>\n<li>\n<p>用 <code>a</code> 、 <code>b</code> 、 <code>c</code>  创建 <code>Triangle</code>  类对象。</p>\n</li>\n<li>\n<p>用该对象调用 <code>get_perimeter()</code>  方法，返回周长。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建三角形类Triangle</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Triangle</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 实现__init__()方法 ，初始化属性</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,x</span>):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义 get_perimeter() 方法 </span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_perimeter</span>(<span class=\"params\">self,other1,other2</span>):</span><br><span class=\"line\">        new = self.x + other1.x + other2.x</span><br><span class=\"line\">        <span class=\"keyword\">return</span> new</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入三个整数 </span></span><br><span class=\"line\">a = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">b = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">c = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建Triangle类对象，并用a、b、c作为参数初始化三边</span></span><br><span class=\"line\">s1 = Triangle(a)</span><br><span class=\"line\">s2 = Triangle(b)</span><br><span class=\"line\">s3 = Triangle(c)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用 get_perimeter() 计算周长</span></span><br><span class=\"line\">perimeter = s1.get_perimeter(s2,s3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印 周长 perimeter</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(perimeter)</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h2 id=\"学生分数总和\"><a class=\"anchor\" href=\"#学生分数总和\">#</a> 学生分数总和</h2>\n<p>要求：</p>\n<p>编写一个程序来创建 <code>Student</code>  类，该类有一个方法返回存储在列表中的分数之和。</p>\n<p><strong>创建类</strong>:</p>\n<ul>\n<li>创建 <code>Student</code>  类，且有一个分数 <code>scores</code>  属性（类型为列表）。</li>\n<li>创建 <code>__init__()</code>  方法初始化 <code>scores</code>  属性。</li>\n<li>创建 <code>get_scores_sum()</code>  方法，将分数相加返回。可使用内置的  <code>sum()</code>  函数。</li>\n</ul>\n<p><strong>类外部</strong>:</p>\n<ul>\n<li>\n<p>创建列表 <code>scores</code>  值为 <code>[55, 75, 80, 62, 77]</code> 。</p>\n</li>\n<li>\n<p>创建 <code>Student</code>  类对象 <code>s1</code> ，并传入 <code>scores</code>  来初始化属性。</p>\n</li>\n<li>\n<p>调用 <code>get_scores_sum()</code>  方法，结果存入 <code>total</code>  变量。</p>\n</li>\n<li>\n<p>打印 <code>total</code>  变量。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 Student 类 </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 使用 __init__() 方法来初始化 scores 属性  </span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,scores</span>):</span><br><span class=\"line\">        self.scores = scores</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 创建get_scores_sum()方法，将分数相加返回</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">ger_score_sum</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(self.scores)</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 创建列表 scores </span></span><br><span class=\"line\">scores = [<span class=\"number\">55</span>, <span class=\"number\">75</span>, <span class=\"number\">80</span>, <span class=\"number\">62</span>, <span class=\"number\">77</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 传递分数scores作为参数创建Student类对象</span></span><br><span class=\"line\">s1 = Student(scores)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对象s1调用方法get_scores_sum()</span></span><br><span class=\"line\">total = s1.ger_score_sum()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印 total</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(total)</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h2 id=\"车辆类中创建引擎类对象\"><a class=\"anchor\" href=\"#车辆类中创建引擎类对象\">#</a> 车辆类中创建引擎类对象</h2>\n<p>要求：</p>\n<p>编写写一个程序，在一个类中创建另一个类的对象。</p>\n<p><strong>创建类</strong>:</p>\n<ul>\n<li>创建两个类：发动机类 <code>Engine</code> ，属性为动力 <code>power</code> ；车辆类 <code>Vehicle</code> ，属性为：轮子 <code>wheels</code>  和发动机 <code>engine</code> 。</li>\n<li><code>Engine</code>  类 <code>__init__()</code>  方法，带两个参数。 <code>self</code>  和 <code>power</code>  来创建并初始化 <code>Engine</code>  类的 <code>power</code>  属性。</li>\n<li><code>Vehicle</code>  类 <code>__init__()</code>  方法，带两个参数 <code>self</code>  和 <code>wheels</code>  来初始化 <code>Vehicle</code>  类的 <code>wheels</code>  属性。</li>\n<li>在 <code>Vehicle</code>  的 <code>init__()</code>  方法中， <code>engine</code>  属性应该为一个 <code>Engine</code>  类的对象，其 <code>power</code>  属性等于<strong> 400</strong>。</li>\n<li>在 <code>Vehicle</code>  类中创建 <code>get_power()</code>  方法，打印 属性 <code>engine</code>  的 <code>power</code>  属性。</li>\n</ul>\n<p><strong>在类外</strong>:</p>\n<ul>\n<li>\n<p>创建车辆 <code>Vehicle</code>  类对象，轮子 <code>wheels</code>  属性等于<strong> 4</strong>。</p>\n</li>\n<li>\n<p>调用该对象的 <code>get_power()</code>  方法。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Engine类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Engine</span>:</span><br><span class=\"line\">    <span class=\"comment\"># __init__() 方法初始化 power 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, power</span>):</span><br><span class=\"line\">        self.power = power</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 Vehicle 类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span>:</span><br><span class=\"line\">    <span class=\"comment\">#  __init__() 方法初始化 wheels 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, wheels</span>):</span><br><span class=\"line\">        self.wheels = wheels</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 引擎属性enginer应该是引擎类的一个对象，power属性为400</span></span><br><span class=\"line\">        self.engine = <span class=\"number\">400</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建 get_power() 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_power</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 打印引擎属性的功率属性（engine是引擎类的一个对象）。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>  self.engine</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建车辆Vehicle类对象</span></span><br><span class=\"line\">s = Vehicle(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用get_power()方法</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s.get_power())</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h2 id=\"调用父类方法\"><a class=\"anchor\" href=\"#调用父类方法\">#</a> 调用父类方法</h2>\n<p>要求：</p>\n<p>编写一个程序，使用派生类 (子类) 对象调用基类 (父类) 的方法:</p>\n<p><strong>创建类</strong>:</p>\n<ul>\n<li>创建动物 <code>Animal</code>  基类。该类中，创建 <code>eat()</code>  方法，打印 &quot;我在吃东西&quot;。</li>\n<li>创建一个继承于 <code>Animal</code>  类的  <code>Dog</code>  类。该类中，创建 <code>bark()</code>  方法，打印 &quot;我在叫&quot;。</li>\n</ul>\n<p><strong>在类外</strong>:</p>\n<ul>\n<li>\n<p>创建 <code>Dog</code>  类对象。</p>\n</li>\n<li>\n<p>用该对象调用 <code>eat()</code>  方法。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Animal类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">eat</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我在吃东西&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 Dog 类，继承于 Animal类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>(<span class=\"title class_ inherited__\">Animal</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">bark</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我在叫&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建Dog类对象</span></span><br><span class=\"line\">t = Dog()</span><br><span class=\"line\"><span class=\"comment\"># 调用对象的 eat() 方法</span></span><br><span class=\"line\">t.eat()<span class=\"comment\">## 33 super()函数使用</span></span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h2 id=\"super函数使用\"><a class=\"anchor\" href=\"#super函数使用\">#</a> super () 函数使用</h2>\n<p>要求：</p>\n<p>编写一个程序，使用 <code>super()</code>  函数在派生类的方法中调用基类的方法。</p>\n<p><strong>创建类</strong>:</p>\n<ul>\n<li>创建动物 <code>Animal</code>  基类。该类中，创建 <code>eat()</code>  方法，打印 &quot;我在吃东西&quot;。</li>\n<li>创建一个继承于 <code>Animal</code>  类的  <code>Dog</code>  类。该类中，创建 <code>bark()</code>  方法，打印 &quot;我在叫&quot;。</li>\n<li>在 <code>Dog</code>  类中定义 <code>eat()</code>  方法，使用 <code>supper()</code>  调用父类 <code>Animal</code>  类的 <code>eat()</code>  方法。</li>\n</ul>\n<p><strong>在类外</strong>:</p>\n<ul>\n<li>创建 <code>Dog</code>  类对象，用该对象调用 <code>eat()</code>  方法。</li>\n</ul>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Animal类 </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">eat</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我在吃东西&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 Dog 类，继承于 Animal类 </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>(<span class=\"title class_ inherited__\">Animal</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">bark</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我在叫&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">eat</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 通过super() 函数来调用父类的eat方法</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().eat()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建Dog类对象 </span></span><br><span class=\"line\">t = Dog()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用对象的 eat() 方法 </span></span><br><span class=\"line\">t.eat()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"正方形面积及周长\"><a class=\"anchor\" href=\"#正方形面积及周长\">#</a> 正方形面积及周长</h2>\n<p>要求：</p>\n<p>编写一个程序，用类来计算一个正方形的面积和周长。(正方形是一个边长相等的矩形)</p>\n<p><strong>创建一个类</strong>。</p>\n<ul>\n<li>创建正方形 <code>Square</code>  类，且有一个长度 <code>length</code>  属性。</li>\n<li>使用  <code>__init__()</code>  来初始化  <code>length</code>  属性。</li>\n<li>创建 <code>compute_area()</code>  方法来计算正方形的面积并返回。</li>\n<li>创建 <code>compute_perimter()</code>  方法来计算正方形的周长并返回。</li>\n</ul>\n<p><strong>在类外</strong>:</p>\n<ul>\n<li>输入一个整数并赋值给 <code>length</code>  变量。</li>\n<li>通过传递 <code>length</code>  作为参数，创建一个 <code>Square</code>  类对象。</li>\n<li>调用 <code>compute_area()</code>  方法并打印面积。</li>\n<li>调用 <code>compute_perimeter()</code>  方法并打印周长。</li>\n</ul>\n<p>正方形的面积等于 <code>length * length</code> ，正方形的周长等于 <code>4 * length</code> 。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建正方形类Square</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Square</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 实现 __init__() 函数，初始化属性 </span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,length</span>):</span><br><span class=\"line\">        self.length = length</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 实现面积方法 get_area() ，并返回面积</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_area</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.length*self.length</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 实现周长方法 get_perimeter() ，并返回周长</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_perimeter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>*self.length</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入一个整数 </span></span><br><span class=\"line\">length = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建Square类对象</span></span><br><span class=\"line\">t = Square(length)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用 get_area() 方法并打印面积</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(t.get_area())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用 get_perimeter() 方法并打印周长</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(t.get_perimeter())</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"列表越界异常处理\"><a class=\"anchor\" href=\"#列表越界异常处理\">#</a> 列表越界异常处理</h2>\n<p>要求：</p>\n<p>编写程序来打印列表在给定索引处的元素。如果索引超出了范围，则打印<strong>错误的索引</strong>。</p>\n<ul>\n<li>\n<p>创建一个列表，元素为 <code>'BMW'</code> ,  <code>'Ferrari'</code> ,  <code>'Audi'</code> ,  <code>'Tesla'</code> 。</p>\n</li>\n<li>\n<p>输入一个整数，并存储在 <code>index</code>  变量中。</p>\n</li>\n<li>\n<p>打印索引 <code>index</code>  处的元素。</p>\n</li>\n<li>\n<p>如果索引超出了范围，则通过<strong>异常处理</strong>打印 &quot;错误的索引&quot;。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用try-except </span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    cars = [<span class=\"string\">&#x27;BMW&#x27;</span>, <span class=\"string\">&#x27;Ferrari&#x27;</span>, <span class=\"string\">&#x27;Audi&#x27;</span>, <span class=\"string\">&#x27;Tesla&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 输入一个整数 </span></span><br><span class=\"line\">    index = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 打印index处cars的元素 </span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(cars[index])</span><br><span class=\"line\"><span class=\"comment\"># expcet 捕获异常处理</span></span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;错误的索引&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h2 id=\"错位词\"><a class=\"anchor\" href=\"#错位词\">#</a> 错位词</h2>\n<p>要求：</p>\n<p>编写一个 Python 程序来判断两个给定的字符串是否是错位词。</p>\n<p>如果两个字符串具有相同的字符，但顺序不同，则被认为是彼此的错位词。 例如， <code>restful</code>  和 <code>fluster</code>  是错位词。</p>\n<ul>\n<li>\n<p>定义函数 <code>are_anagrams()</code> ，有两个参数： <code>string1</code>  和 <code>string2</code> 。</p>\n</li>\n<li>\n<p>在函数内，如果两个字符串是错位词，则返回 <code>True</code> ，否则返回 <code>False</code> 。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">are_anagrams</span>(<span class=\"params\">string1, string2</span>):</span><br><span class=\"line\">    app1 = [elem <span class=\"keyword\">for</span> elem <span class=\"keyword\">in</span> string1.lower() <span class=\"keyword\">if</span> elem.isalpha() <span class=\"keyword\">or</span> elem.isdigit()]<span class=\"comment\">#筛选字母数字</span></span><br><span class=\"line\">    app2 = [elem <span class=\"keyword\">for</span> elem <span class=\"keyword\">in</span> string2.lower() <span class=\"keyword\">if</span> elem.isalpha() <span class=\"keyword\">or</span> elem.isdigit()]</span><br><span class=\"line\">    app1 = <span class=\"built_in\">set</span>(app1)</span><br><span class=\"line\">    app2 = <span class=\"built_in\">set</span>(app2)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> app1 == app2:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\"># 获取输入string1 和 string2</span></span><br><span class=\"line\">string1 = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">string2 = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"><span class=\"comment\"># 调用函数并打印结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(are_anagrams(string1, string2))</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h2 id=\"求最大公约数\"><a class=\"anchor\" href=\"#求最大公约数\">#</a> 求最大公约数</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find_gcd</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> b == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    <span class=\"keyword\">return</span> find_gcd(b,a%b)</span><br><span class=\"line\">    <span class=\"comment\"># 在此处编写代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入整数</span></span><br><span class=\"line\">first_number = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">second_number = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(find_gcd(first_number, second_number))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"格式化数字\"><a class=\"anchor\" href=\"#格式化数字\">#</a> 格式化数字</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_commas</span>(<span class=\"params\">number</span>):</span><br><span class=\"line\">    formatted_str = <span class=\"built_in\">format</span>(number, <span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> formatted_str</span><br><span class=\"line\">    <span class=\"comment\"># 在此处编写代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取用户输入“78934654383”</span></span><br><span class=\"line\">number = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(add_commas(number))</span><br><span class=\"line\"><span class=\"comment\"># 78,934,654,383</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"最小公倍数\"><a class=\"anchor\" href=\"#最小公倍数\">#</a> 最小公倍数</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gcd</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 辗转相除法求最大公约数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> b:</span><br><span class=\"line\">        a, b = b, a % b</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lcm</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 最小公倍数等于两数乘积除以最大公约数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * b // gcd(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">smallest_multiple</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 初始化最小公倍数为1</span></span><br><span class=\"line\">    result = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 从2到n依次求最小公倍数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">        result = lcm(result, i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入n</span></span><br><span class=\"line\">n = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(smallest_multiple(n))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"十六进制转换为二进制\"><a class=\"anchor\" href=\"#十六进制转换为二进制\">#</a> 十六进制转换为二进制</h2>\n<p>要求：</p>\n<p>编写一个程序，将一个两位十六进制数转换为其等价的二进制。</p>\n<p>例如，十进制数<strong> 75</strong> 在十六进制系统中为<strong> 0x4B</strong>，在二进制系统中为<strong> 1001011</strong>。</p>\n<p>因此，如果用户输入<strong> 0x4B</strong> 作为输入，则您的程序应输出<strong> 01001011</strong>。</p>\n<p><strong>注意</strong>：二进制输出必须始终由 8 位或更多位组成。</p>\n<ul>\n<li>定义函数 <code>hex_to_binary()</code> ，该函数接受单个参数 <code>hex_number</code> （以 <code>0xXX</code>  格式表示的十六进制数）。</li>\n<li>在函数内，将十六进制数转换为二进制，并将结果作为字符串返回。</li>\n</ul>\n<h3 id=\"示例输入\"><a class=\"anchor\" href=\"#示例输入\">#</a> 示例输入</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0xFF</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"示例输出\"><a class=\"anchor\" href=\"#示例输出\">#</a> 示例输出</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11111111</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_to_binary</span>(<span class=\"params\">hex_number</span>):</span><br><span class=\"line\">    s = <span class=\"built_in\">format</span>(hex_number, <span class=\"string\">&#x27;08b&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取用户输入的16进制数</span></span><br><span class=\"line\">hex_number = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(), <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印转换后的二进制数 </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(hex_to_binary(hex_number))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"双基回文数\"><a class=\"anchor\" href=\"#双基回文数\">#</a> 双基回文数</h2>\n<p>要求：</p>\n<p>编写一个程序来检查一个数字是否是双基回文数。</p>\n<p>回文是指从前往后读和从后往前读都一样的字母、数字的序列。</p>\n<p>双基回文数是指在十进制和二进制表示中都是回文的数字。</p>\n<p>例如：</p>\n<p><strong>585</strong> = <strong>1001001001</strong></p>\n<p>是一个双基回文，其二进制是回文形式，十进制也是回文形式。</p>\n<ul>\n<li>定义函数 <code>check_double_base_palindrome()</code> ，参数为整数。</li>\n<li>在函数内，检查数字的十进制和二进制形式是否都是回文。</li>\n<li>如果是双基回文，返回 <code>True</code> ，否则返回 <code>False</code> 。</li>\n</ul>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check_double_base_palindrome</span>(<span class=\"params\">number</span>):</span><br><span class=\"line\">    bi = (<span class=\"built_in\">bin</span>(number))[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">bijiao</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">        app = <span class=\"built_in\">list</span>(<span class=\"built_in\">str</span>(s))</span><br><span class=\"line\">        app1 = app[:]</span><br><span class=\"line\">        app1 = [elem <span class=\"keyword\">for</span> elem <span class=\"keyword\">in</span> app1 <span class=\"keyword\">if</span> elem.isalpha() <span class=\"keyword\">or</span> elem.isdigit()]</span><br><span class=\"line\">        app.reverse()</span><br><span class=\"line\">        app2 = app</span><br><span class=\"line\">        app2 = [elem <span class=\"keyword\">for</span> elem <span class=\"keyword\">in</span> app2 <span class=\"keyword\">if</span> elem.isalpha() <span class=\"keyword\">or</span> elem.isdigit()]</span><br><span class=\"line\">        cou = <span class=\"built_in\">len</span>(app1)</span><br><span class=\"line\">        flag = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,cou):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> app1[i]==app2[i]:</span><br><span class=\"line\">                flag = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                flag = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> flag == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    flag1 = bijiao(number)</span><br><span class=\"line\">    flag2 = bijiao(bi)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> flag1 == <span class=\"number\">1</span> <span class=\"keyword\">and</span> flag2 == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 此处编写代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取用户输入</span></span><br><span class=\"line\">number = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(check_double_base_palindrome(number))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"嵌套元组唯一元素\"><a class=\"anchor\" href=\"#嵌套元组唯一元素\">#</a> 嵌套元组唯一元素</h2>\n<p>要求：</p>\n<p>编写一个程序来提取嵌套元组中的唯一元素。</p>\n<p>例如，在嵌套元组 <code>((1,2,3),(2,4,6),(2,3,5))</code>  中，<strong>2</strong> 重复出现了 3 次，<strong>3</strong> 重复出现了 2 次，但我们的输出列表只会包含<strong> 2</strong>、<strong>3</strong> 一次。</p>\n<p>即： <code>[1, 2, 3, 4, 5, 6]</code></p>\n<ul>\n<li>定义函数 <code>get_unique_elements()</code> ，函数接受一个参数 - 一个包含三个元组的嵌套元组。</li>\n<li>在函数内，提取所有元组中的独立元素，确保不重复提取元素。</li>\n<li>以列表的形式返回唯一的元素，并<strong>从小到大</strong>排序。</li>\n</ul>\n<h3 id=\"示例输入-2\"><a class=\"anchor\" href=\"#示例输入-2\">#</a> 示例输入</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 2 3</span><br><span class=\"line\">2 3 3 4</span><br><span class=\"line\">4 5 5 6</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"示例输出-2\"><a class=\"anchor\" href=\"#示例输出-2\">#</a> 示例输出</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_unique_elements</span>(<span class=\"params\">nested_tuples</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 此处编写代码</span></span><br><span class=\"line\">    a = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nested_tuples:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i:</span><br><span class=\"line\">            a.add(j)</span><br><span class=\"line\">    a = <span class=\"built_in\">list</span>(a)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化嵌套元组</span></span><br><span class=\"line\">nested_tuples = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取用户输入</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    tuple_elements = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\">    nested_tuples.append(tuple_elements)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(get_unique_elements(nested_tuples))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"日期相差多少天\"><a class=\"anchor\" href=\"#日期相差多少天\">#</a> 日期相差多少天</h2>\n<p>要求：</p>\n<p>编写一个程序，计算两个日期之间的天数。</p>\n<ul>\n<li>导入 <code>datetime</code>  模块。</li>\n<li>定义函数 <code>calculate_days_between()</code>  数，其中有两个参数： <code>(date1, date2)</code> ，类型为字符串，格式为 <code>YYYY-MM-DD</code> 。</li>\n<li>在函数内，将字符串转换为 <code>datetime</code>  对象，并计算 <code>date2</code>  和 <code>date1</code>  之间的差异，以天为单位。</li>\n<li>以天数的差异作为输出返回。</li>\n</ul>\n<h3 id=\"示例输入-3\"><a class=\"anchor\" href=\"#示例输入-3\">#</a> 示例输入</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2023-04-14</span><br><span class=\"line\">2023-04-20</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"示例输出-3\"><a class=\"anchor\" href=\"#示例输出-3\">#</a> 示例输出</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calculate_days_between</span>(<span class=\"params\">date1, date2</span>):</span><br><span class=\"line\">    date1_obj = datetime.strptime(date1, <span class=\"string\">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class=\"line\">    date2_obj = datetime.strptime(date2, <span class=\"string\">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算两个日期之间的差异，并取绝对值</span></span><br><span class=\"line\">    delta = date2_obj - date1_obj</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 返回天数差异</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> delta.days</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取用户输入</span></span><br><span class=\"line\">date1 = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">date2 = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(calculate_days_between(date1, date2))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"字典转为列表\"><a class=\"anchor\" href=\"#字典转为列表\">#</a> 字典转为列表</h2>\n<p>要求：</p>\n<p>编写一个程序将字典转换为列表，列表的每一个元素表示一个键值对，并按键排序。</p>\n<ul>\n<li>定义函数 <code>dict_to_sorted_list()</code> ，其参数为 <code>dictionary</code> 。</li>\n<li>在函数中，将字典转换为列表，其中每个列表的元素包含<strong>键</strong>及其相应的<strong>值</strong>。</li>\n<li>按升序对此列表排序。</li>\n<li>返回排序后的列表。</li>\n</ul>\n<h3 id=\"示例输入-4\"><a class=\"anchor\" href=\"#示例输入-4\">#</a> 示例输入</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;car&quot;: 3, &quot;bus&quot;: 2, &quot;train&quot;: 5&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"示例输出-4\"><a class=\"anchor\" href=\"#示例输出-4\">#</a> 示例输出</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[&#x27;bus&#x27;, 2], [&#x27;car&#x27;, 3], [&#x27;train&#x27;, 5]]</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dict_to_sorted_list</span>(<span class=\"params\">dictionary</span>):</span><br><span class=\"line\">    dictionary = <span class=\"built_in\">sorted</span>(dictionary.items())</span><br><span class=\"line\">    arr = [[key,value] <span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> dictionary]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取输入转为字典</span></span><br><span class=\"line\">dictionary = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_to_sorted_list(dictionary))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"字符串中缺失的字母\"><a class=\"anchor\" href=\"#字符串中缺失的字母\">#</a> 字符串中缺失的字母</h2>\n<p>要求：</p>\n<p>编写一个程序，返回一个按字母顺序排序的字符串，其中包含给定字符串中不出现的所有小写字母。</p>\n<ul>\n<li>定义函数 <code>get_missing_letters()</code> ，参数为 <code>word_string</code> 。</li>\n<li>在函数内部，返回一个排序的字符串，其中包含不出现在 <code>word_string</code>  中的所以小写字母。</li>\n</ul>\n<p><strong>注意</strong>：假设用户只输入小写字母字符串作为输入。</p>\n<h3 id=\"示例输入-5\"><a class=\"anchor\" href=\"#示例输入-5\">#</a> 示例输入</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stray</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"示例输出-5\"><a class=\"anchor\" href=\"#示例输出-5\">#</a> 示例输出</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bcdefghijklmnopquvwxz</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>解释</strong>：输入字符串 <code>&quot;stray&quot;</code>  包含英文字母表中除 <code>&quot;bcdefghijklmnopquvwxz&quot;</code>  之外的所有字母。</p>\n</blockquote>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_missing_letters</span>(<span class=\"params\">word_string</span>):</span><br><span class=\"line\">    b = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a = <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">        flag = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> word_string:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == j:</span><br><span class=\"line\">                flag = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> flag != <span class=\"number\">1</span>:</span><br><span class=\"line\">            b += i</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">    <span class=\"comment\"># 此处编写你的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取输入的字符串</span></span><br><span class=\"line\">word_string = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(get_missing_letters(word_string))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"子列表的数量\"><a class=\"anchor\" href=\"#子列表的数量\">#</a> 子列表的数量</h2>\n<p>要求：</p>\n<p>编写一个程序来计算列表中子列表的数量。</p>\n<ul>\n<li>定义函数 <code>count_sublists()</code> ，参数为 <code>list_input</code> 。</li>\n<li>在函数内部，返回输入列表中子列表的总数。</li>\n</ul>\n<h3 id=\"示例输入-6\"><a class=\"anchor\" href=\"#示例输入-6\">#</a> 示例输入</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"示例输出-6\"><a class=\"anchor\" href=\"#示例输出-6\">#</a> 示例输出</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">count_sublists</span>(<span class=\"params\">list_input</span>):</span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list_input:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:\t\t<span class=\"comment\">#使用try except是为了处理子列表为1或报错</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i:</span><br><span class=\"line\">                flag = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        total += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> total</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 此处编写代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取输入转为列表</span></span><br><span class=\"line\">list_input = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(count_sublists(list_input))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"重复字符的数量\"><a class=\"anchor\" href=\"#重复字符的数量\">#</a> 重复字符的数量</h2>\n<p>要求：</p>\n<p>编写一个程序来计算字符串中重复出现多次的不同字符的数量。</p>\n<p>例如，在单词 <code>Programming</code>  中：</p>\n<ul>\n<li><strong>r</strong> 重复出现了 2 次</li>\n<li><strong>g</strong> 重复出现了 2 次</li>\n<li><strong>m</strong> 重复出现了 2 次</li>\n</ul>\n<p>由于 3 个不同的字符重复出现多次，因此重复字符的数量为<strong> 3</strong>。</p>\n<ul>\n<li>定义函数 <code>count_duplicate_chars()</code> ，参数为 <code>input_string</code> 。</li>\n<li>在函数内部，计算并返回字符串中重复字符的数量。</li>\n</ul>\n<h3 id=\"示例输入-7\"><a class=\"anchor\" href=\"#示例输入-7\">#</a> 示例输入</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Programming</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"示例输出-7\"><a class=\"anchor\" href=\"#示例输出-7\">#</a> 示例输出</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">count_duplicate_chars</span>(<span class=\"params\">input_string</span>):</span><br><span class=\"line\">    char_count = &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 遍历字符串，统计每个字符的出现次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> input_string:</span><br><span class=\"line\">        <span class=\"comment\"># 如果字符已经在字典中，则增加其出现次数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> char_count:</span><br><span class=\"line\">            char_count[char] += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 否则，将字符添加到字典中并设置其出现次数为1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            char_count[char] = <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 计算重复出现多次的不同字符的数量</span></span><br><span class=\"line\">    duplicate_count = <span class=\"built_in\">sum</span>(<span class=\"number\">1</span> <span class=\"keyword\">for</span> count <span class=\"keyword\">in</span> char_count.values() <span class=\"keyword\">if</span> count &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> duplicate_count</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取用户输入</span></span><br><span class=\"line\">test_string = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\">result = count_duplicate_chars(test_string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"最长单词\"><a class=\"anchor\" href=\"#最长单词\">#</a> 最长单词</h2>\n<p>要求：</p>\n<p>编写一个程序，找出一个句子中最长的单词。如果有两个或多个单词长度相同，返回第一个最长的单词。</p>\n<ul>\n<li>定义函数 <code>get_longest_word()</code> ，它接受一个参数： <code>sentence</code> 。</li>\n<li>在函数内部，实现识别最长单词的逻辑，并返回第一个最长单词。</li>\n</ul>\n<h3 id=\"示例输入-8\"><a class=\"anchor\" href=\"#示例输入-8\">#</a> 示例输入</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">My toy&#x27;s name is Transformers Optimus Prime.</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"示例输出-8\"><a class=\"anchor\" href=\"#示例输出-8\">#</a> 示例输出</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transformers</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_longest_word</span>(<span class=\"params\">sentence</span>):</span><br><span class=\"line\">    a = sentence.split()<span class=\"comment\">#以空格为分界划分单词为单个列表</span></span><br><span class=\"line\">    char = &#123;&#125;<span class=\"comment\">#用字典的键值对来储存每个单词的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">        char[i] = <span class=\"built_in\">len</span>(i)</span><br><span class=\"line\">    b = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> char.values():</span><br><span class=\"line\">        b.append(i)</span><br><span class=\"line\">    s = <span class=\"built_in\">max</span>(b)<span class=\"comment\">#找出最长单词</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> char:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> char[i] == s:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 在此处编写你的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取输入</span></span><br><span class=\"line\">sentence = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(get_longest_word(sentence))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"完美数2\"><a class=\"anchor\" href=\"#完美数2\">#</a> 完美数 2</h2>\n<p>要求：</p>\n<p>编写一个程序来检查一个整数是否是完美数。</p>\n<p>完美数是一个正数，且其因子（不包括它本身）之和等于自己。例如，<strong>6</strong> 是一个完美数，因为它的因子有 <strong>1</strong>，<strong>2</strong> 和 <strong>3</strong>，而 <strong>1</strong> + <strong>2</strong> + <strong>3</strong> = <strong>6</strong>。 其他的完美数如 <strong>28</strong>，<strong>496</strong> 和 <strong>8128</strong>。</p>\n<ul>\n<li>定义函数 <code>check_perfect()</code> ，参数为 <code>num</code> 。</li>\n<li>在函数内，如果数字 <code>num</code>  是完美数，返回 <code>True</code> ，否则返回 <code>False</code> 。</li>\n</ul>\n<h3 id=\"示例输入-9\"><a class=\"anchor\" href=\"#示例输入-9\">#</a> 示例输入</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"示例输出-9\"><a class=\"anchor\" href=\"#示例输出-9\">#</a> 示例输出</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">True</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check_perfect</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    a = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,num):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num % i == <span class=\"number\">0</span>:</span><br><span class=\"line\">            a.append(i)</span><br><span class=\"line\">    s = <span class=\"built_in\">sum</span>(a)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s == num:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"comment\"># 此处编写你的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入处理 </span></span><br><span class=\"line\">num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数 </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(check_perfect(num))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"判断字母位置和是否为偶数\"><a class=\"anchor\" href=\"#判断字母位置和是否为偶数\">#</a> 判断字母位置和是否为偶数</h2>\n<p>要求：</p>\n<p>编写一个程序，用于判断给定字符串中字母在字母表中的位置和是否为偶数。</p>\n<p>例如，字母表中的位置：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">j = 10</span><br><span class=\"line\">z = 26</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>定义函数 <code>is_sum_even()</code> ，参数为 <code>string</code> 。</li>\n<li>在函数内，计算 <code>string</code>  中字母在字母表中的位置和（不区分大小写）。</li>\n<li>忽略字符串中的非字母符号。</li>\n<li>如果和为偶数，则返回 <code>True</code> ，否则返回 <code>False</code> 。</li>\n</ul>\n<h3 id=\"示例输入-10\"><a class=\"anchor\" href=\"#示例输入-10\">#</a> 示例输入</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i am king</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"示例输出-10\"><a class=\"anchor\" href=\"#示例输出-10\">#</a> 示例输出</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">True</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">is_sum_even</span>(<span class=\"params\">string</span>):</span><br><span class=\"line\">    a = <span class=\"string\">&quot; abcdefghijklmnopqrstuvwxyz&quot;</span><span class=\"comment\">#第一个字符为空格标记为0</span></span><br><span class=\"line\">    a = <span class=\"built_in\">list</span>(a)</span><br><span class=\"line\">    b = []</span><br><span class=\"line\">    string = <span class=\"built_in\">list</span>(string)</span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> string:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == j:</span><br><span class=\"line\">                b.append(total)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                total += <span class=\"number\">1</span></span><br><span class=\"line\">        total = <span class=\"number\">0</span></span><br><span class=\"line\">    s = <span class=\"built_in\">sum</span>(b)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"comment\"># 此处编写你的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取字符串</span></span><br><span class=\"line\">string = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(is_sum_even(string))</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        }
    ]
}